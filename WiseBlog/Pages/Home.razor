@page "/"
@using WiseBlog.Services
@using WiseBlog.Shared.Models
@inject AuthenticationStateProvider Auth
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IConfiguration Configuration

<PageTitle>Home</PageTitle>
<AuthorizeView>
    <Authorized>

        <MudContainer MaxWidth="MaxWidth.Medium" Class="pt-lg-5 mt-20 d-flex BlogCard">
                @if (blogs == null)
                {
                    <p class="text-gray-500">Loading...</p>
                }

                else
                {
                  <div class="w-8/12 pr-6">
                    <MudTabs Class="mb-lg-5">
                        <MudTabPanel Text="New Drops" Icon="@Icons.Material.Filled.NewReleases">
                            <div>
                                @foreach (var blog in blogList)
                                {
                                    <div class="flex flex-col md:flex-row items-start gap-6 border-b pb-6">
                                        <!-- Blog Content -->
                                        <div class="flex-1">
                                            <h2 class="text-xl mt-2 font-semibold text-gray-900 hover:underline cursor-pointer"
                                            @onclick="() => Nav(blog.Id)">
                                                @blog.title
                                            </h2>
                                            <p class="text-gray-600 mt-2"><strong>Category:  </strong> @blog.category <strong class="p-2">Visibility:</strong>@blog.visibility</p>
                                            <p class="text-gray-600 mt-2">@blog.description</p>
                                            <p class="text-sm text-gray-400 mt-2">
                                                <strong>Uploaded: </strong>@blog.created_at.ToString("MMM dd, yyyy h:mm tt")
                                            </p>
                                            <p class="text-sm text-gray-400 mt-2">
                                                <strong>Created By: </strong>@blog.userName
                                            </p>
                                        </div>
                                    </div>
                                }
                            </div>
                        </MudTabPanel>
                        <MudTabPanel Text="Following" Icon="@Icons.Material.Filled.SupervisedUserCircle">
                            <div class="space-y-8">
                                @foreach (var blog in blogList)
                                {
                                    @if (AuthProfile != null && AuthProfile.following.Contains(blog.userId))
                                    {
                                        <div class="flex flex-col md:flex-row items-start gap-6 border-b pb-6">
                                            <!-- Blog Content -->
                                            <div class="flex-1">
                                                <h2 class="text-xl mt-2 font-semibold text-gray-900 hover:underline cursor-pointer"
                                                @onclick="() => Nav(blog.Id)">
                                                    @blog.title
                                                </h2>
                                                <p class="text-gray-600 mt-2"><strong>Category:  </strong> @blog.category <strong class="p-2">Visibility:</strong>@blog.visibility</p>
                                                <p class="text-gray-600 mt-2">@blog.description</p>
                                                <p class="text-sm text-gray-400 mt-2">
                                                    <strong>Uploaded: </strong>@blog.created_at.ToString("MMM dd, yyyy h:mm tt")
                                                </p>
                                                <p class="text-sm text-gray-400 mt-2">
                                                    <strong>Created By: </strong>@blog.userName
                                                </p>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </MudTabPanel>
                        <MudTabPanel Text="Technology" Icon="@Icons.Material.Filled.Computer">
                            <div class="space-y-8">
                                @foreach (var blog in blogList)
                                {
                                    @if (blog.category == Enum.Parse<BlogCategory>("Technology", true))
                                    {
                                        <div class="flex flex-col md:flex-row items-start gap-6 border-b pb-6">
                                            <!-- Blog Content -->
                                            <div class="flex-1">
                                                <h2 class="text-xl mt-2 font-semibold text-gray-900 hover:underline cursor-pointer"
                                                @onclick="() => Nav(blog.Id)">
                                                    @blog.title
                                                </h2>
                                                <p class="text-gray-600 mt-2"><strong>Category:  </strong> @blog.category <strong class="p-2">Visibility:</strong>@blog.visibility</p>
                                                <p class="text-gray-600 mt-2">@blog.description</p>
                                                <p class="text-sm text-gray-400 mt-2">
                                                    <strong>Uploaded: </strong>@blog.created_at.ToString("MMM dd, yyyy h:mm tt")
                                                </p>
                                                <p class="text-sm text-gray-400 mt-2">
                                                    <strong>Created By: </strong>@blog.userName
                                                </p>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </MudTabPanel>
                        <MudTabPanel Text="Lifestyle" Icon="@Icons.Material.Filled.Style">
                            <div class="space-y-8">
                                @foreach (var blog in blogList)
                                {
                                    @if (blog.category == Enum.Parse<BlogCategory>("Lifestyle", true))
                                    {
                                        <div class="flex flex-col md:flex-row items-start gap-6 border-b pb-6">
                                            <!-- Blog Content -->
                                            <div class="flex-1">
                                                <h2 class="text-xl mt-2 font-semibold text-gray-900 hover:underline cursor-pointer"
                                                @onclick="() => Nav(blog.Id)">
                                                    @blog.title
                                                </h2>
                                                <p class="text-gray-600 mt-2"><strong>Category:  </strong> @blog.category <strong class="p-2">Visibility:</strong>@blog.visibility</p>
                                                <p class="text-gray-600 mt-2">@blog.description</p>
                                                <p class="text-sm text-gray-400 mt-2">
                                                    <strong>Uploaded: </strong>@blog.created_at.ToString("MMM dd, yyyy h:mm tt")
                                                </p>
                                                <p class="text-sm text-gray-400 mt-2">
                                                    <strong>Created By: </strong>@blog.userName
                                                </p>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </MudTabPanel>
                        <MudTabPanel Text="Health Care" Icon="@Icons.Material.Filled.HealthAndSafety">
                            <div class="space-y-8">
                                @foreach (var blog in blogList)
                                {
                                    @if (blog.category == Enum.Parse<BlogCategory>("HealthCare", true))
                                    {
                                        <div class="flex flex-col md:flex-row items-start gap-6 border-b pb-6">
                                            <!-- Blog Content -->
                                            <div class="flex-1">
                                                <h2 class="text-xl mt-2 font-semibold text-gray-900 hover:underline cursor-pointer"
                                                @onclick="() => Nav(blog.Id)">
                                                    @blog.title
                                                </h2>
                                                <p class="text-gray-600 mt-2"><strong>Category:  </strong> @blog.category <strong class="p-2">Visibility:</strong>@blog.visibility</p>
                                                <p class="text-gray-600 mt-2">@blog.description</p>
                                                <p class="text-sm text-gray-400 mt-2">
                                                    <strong>Uploaded: </strong>@blog.created_at.ToString("MMM dd, yyyy h:mm tt")
                                                </p>
                                                <p class="text-sm text-gray-400 mt-2">
                                                    <strong>Created By: </strong>@blog.userName
                                                </p>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </MudTabPanel>
                    </MudTabs>
                  </div>
                

            <div class="w-4/12 bg-gray-100 rounded-lg shadow-md RSS" style="min-width: 350px;">
                <h1 class="text-center mb-5 text-success">What's New?</h1>
                <h2 class="text-md font-semibold text-gray-800 break-normal">Favourite Bloggers!</h2>
                @if (F1Blog != null)
                {
                    <h5 class="text-gray-600 mt-5 break-words cursor-pointer text-decoration-underline"
                        @onclick="() => NavToProfile(F1Blog.userId)">
                        <MudIcon Class="mr-1" Icon="@Icons.Material.Filled.AccountCircle" />@F1Blog.userName</h5>
                    <p class="hover:underline cursor-pointer text-xxl-center text-decoration-underline"
                    @onclick="() => Nav(F1Blog.Id)">
                        <MudIcon Class="mr-1" Icon="@Icons.Material.Filled.OpenInNew" />@F1Blog.title
                    </p>
                }
                else
                {
                    <p class="hover:underline cursor-pointer text-xxl-center">Currently no posts from your favourites!</p>
                }
                @if (F2Blog != null)
                {
                    <h5 class="text-gray-600 mt-5 break-words cursor-pointer text-decoration-underline"
                        @onclick="() => NavToProfile(F2Blog.userId)">
                        <MudIcon Class="mr-1" Icon="@Icons.Material.Filled.AccountCircle" />@F2Blog.userName
                    </h5>
                    <p class="hover:underline cursor-pointer text-xxl-center text-decoration-underline"
                    @onclick="() => Nav(F2Blog.Id)">
                        <MudIcon Class="mr-1" Icon="@Icons.Material.Filled.OpenInNew" />@F2Blog.title
                    </p>
                }
                <hr />
                <h2 class="text-md font-semibold text-gray-800 break-normal">Latest Categories!</h2>
                @if (RSSTechnology != null)
                {
                    <h5 class="text-gray-600 mt-5 break-words">Technology</h5>
                    <p class="hover:underline cursor-pointer text-xxl-center text-decoration-underline"
                    @onclick="() => Nav(RSSTechnology.Id)">
                        <MudIcon Class="mr-1" Icon="@Icons.Material.Filled.OpenInNew" />@RSSTechnology.title
                    </p>
                }
                @if (RSSLifestyle != null)
                {
                    <h5 class="text-gray-600 mt-5 break-words">Lifestyle</h5>
                    <p class="hover:underline cursor-pointer text-xxl-center text-decoration-underline"
                    @onclick="() => Nav(RSSLifestyle.Id)">
                        <MudIcon Class="mr-1" Icon="@Icons.Material.Filled.OpenInNew" />@RSSLifestyle.title
                    </p>
                }
                @if (RSSHealthCare != null)
                {
                    <h5 class="text-gray-600 mt-5 break-words">Health Care</h5>
                    <p class="hover:underline cursor-pointer text-xxl-center text-decoration-underline"
                    @onclick="() => Nav(RSSHealthCare.Id)">
                        <MudIcon Class="mr-1" Icon="@Icons.Material.Filled.OpenInNew" />@RSSHealthCare.title
                    </p>
                }

            </div>
            }

        </MudContainer>

    </Authorized>

    <NotAuthorized>
        <div class="container text-center d-flex flex-column justify-content-center align-items-center" style="height: 100vh;">
            <h1 class="display-1 fw-bold" style="font-size: 4rem;">Wise Blog & ideas</h1>
            <p class="lead mt-3" style="font-size: 1.5rem;">A place to read and write your stories</p>
            <p>Welcome to the app.</p>
            <NavLink class="mt-3 nav-link" href="/login" Match="NavLinkMatch.All">
                <MudButton Variant="Variant.Outlined" Style="border-radius: 50px; color: white; background-color: black;">
                    Start Reading!
                </MudButton>

            </NavLink>
        </div>
    </NotAuthorized>

</AuthorizeView>

<style>
    .BlogCard {
        margin-left: 5%;
        position: relative;
        display: flex;
        gap: 2rem;
    }

    .RSS {
        position: fixed;
        right: 60px;
        top: 90px;
        width: 350px;
        z-index: 1;
        overflow-y: auto;
        padding: 1rem;
        border-radius: 0.5rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        @* background-color: #f3f4f6; *@
        height: calc(100vh - 120px);
        z-index: 1; /* Ensure proper stacking */
    }

    /* Ensure app bar is fully visible */
    .mud-appbar {
        z-index: 10; /* Higher z-index to stay on top */
        width: 100% !important;
    }

    /* Media query for responsive design */
    @@media (max-width: 1024px) {
        .BlogCard

    {
        margin: 1rem;
        margin-top: 20px !important;
        flex-direction: column;
        gap: 2rem;
    }

    .BlogCard > div:first-child {
        width: 100% !important;
        padding-right: 0;
    }

    .RSS {
        position: relative;
        right: auto;
        top: auto;
        width: 100%;
        min-width: 100% !important;
        height: auto;
        margin-top: 0;
        margin-bottom: 2rem;
        @* background-color: #f3f4f6; *@
    }

    /* Ensure proper stacking order */
    .MudContainer {
        display: flex;
        flex-direction: column;
    }

        /* Move RSS feed to bottom in responsive mode */
        .MudContainer > div:last-child {
            order: 2;
        }

        .MudContainer > div:first-child {
            order: 1;
        }

    /* Additional fix for app bar in responsive mode */
    .mud-appbar {
        width: 100% !important;
        position: sticky !important;
        top: 0;
        left: 0;
    }

    }

    .container {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
    }
    
</style>



@code {
    WiseBlog.Shared.Models.Profile AuthProfile;

    public List<WiseBlog.Shared.Models.Blog> blogs;
    public List<WiseBlog.Shared.Models.Blog> blogList = new List<Shared.Models.Blog>();

    string apiBaseUrl;

    string following1;
    string following2;
    WiseBlog.Shared.Models.Blog? F1Blog = null;
    WiseBlog.Shared.Models.Blog? F2Blog = null;
    WiseBlog.Shared.Models.Blog? RSSTechnology = null;
    WiseBlog.Shared.Models.Blog? RSSLifestyle = null;
    WiseBlog.Shared.Models.Blog? RSSHealthCare = null;

    protected override async Task OnInitializedAsync()
    {
        apiBaseUrl = Configuration["WEBAPI:ControllerURL"];
        var authuser = ((AuthenticationProvider)Auth).User;
        Console.WriteLine(authuser?.name);

        if (authuser != null)
        {
            try
            {
                // Get blogs
                var blogsResponse = await Http.GetAsync($"{apiBaseUrl}/api/Blog/GetAllBlogs");
                if (blogsResponse.IsSuccessStatusCode)
                {
                    blogs = await blogsResponse.Content.ReadFromJsonAsync<List<WiseBlog.Shared.Models.Blog>>();
                    blogs.Reverse();
                }
                else
                {
                    Console.WriteLine($"Failed to load blogs. Status: {blogsResponse.StatusCode}");
                    blogs = new List<WiseBlog.Shared.Models.Blog>();
                }

                // Get profile
                var profileResponse = await Http.GetAsync($"{apiBaseUrl}/api/Profile?userId={authuser.id}");
                if (profileResponse.IsSuccessStatusCode)
                {
                    AuthProfile = await profileResponse.Content.ReadFromJsonAsync<WiseBlog.Shared.Models.Profile>();
                    Console.WriteLine(AuthProfile?.name);
                    Console.WriteLine(AuthProfile?.following?.Count);
                }
                else if (profileResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    Console.WriteLine("Profile not found for current user.");
                    AuthProfile = new WiseBlog.Shared.Models.Profile
                    {
                        userId = authuser.id.ToString(),
                        name = authuser.name,
                        following = new List<string>()
                    };
                }
                else
                {
                    Console.WriteLine($"Error fetching profile. Status: {profileResponse.StatusCode}");
                }

                // Prepare lists
                PrepareBlogList();
                StateHasChanged();

                GetRSSFeed();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
            }
        }
    }


    private void GetRSSFeed()
    {
        Console.WriteLine("Entering RSS Feed");
        if (AuthProfile != null)
        {
            following1 = AuthProfile.following.Count > 0 ? AuthProfile.following[AuthProfile.following.Count - 1] : null;
            following2 = AuthProfile.following.Count > 1 ? AuthProfile.following[AuthProfile.following.Count - 2] : null;
            Console.WriteLine("Following 1 : " + following1);
            Console.WriteLine("Following 2 : " + following2);

            foreach (var blog in blogList)
            {
                if (F1Blog == null && (following1 == (blog.userId))) { F1Blog = blog; Console.WriteLine("F1Blog : " + F1Blog); }
                else if (F2Blog == null && (following2 == (blog.userId))) { F2Blog = blog; Console.WriteLine("F2Blog : " + F2Blog); }

                if (RSSTechnology == null && (blog.category == Enum.Parse<BlogCategory>("Technology", true))) { RSSTechnology = blog; }
                else if (RSSLifestyle == null && (blog.category == Enum.Parse<BlogCategory>("Lifestyle", true))) { RSSLifestyle = blog; }
                else if (RSSHealthCare == null && (blog.category == Enum.Parse<BlogCategory>("HealthCare", true))) { RSSHealthCare = blog; }
            }
        }
    }
    private void PrepareBlogList()
    {
        foreach (var blog in blogs)
        {
            if (blog.visibility == Enum.Parse<VisibilityOptions>("Public", true))
            {
                blogList.Add(blog);
            }
            else if (blog.visibility == Enum.Parse<VisibilityOptions>("Private", true))
            {
                continue;
            }
            else
            {
                Console.WriteLine("Entering Followed Post");
                if (AuthProfile != null && (AuthProfile.following.Contains(blog.userId)) || (AuthProfile.userId == blog.userId))
                {
                    Console.WriteLine("Is Following");
                    blogList.Add(blog);
                }
            }
        }
    }

    public void Nav(string blogId)
    {
        Navigation.NavigateTo($"/blog?blogId={blogId}");
    }

    public void NavToProfile(string ProfileId)
    {
        Navigation.NavigateTo($"/profile?id={ProfileId}");
    }
}
