@page "/blog"
@inject HttpClient Http
@using Microsoft.AspNetCore.WebUtilities
@using Markdig
@inject NavigationManager Nav
@inject AuthenticationStateProvider Auth
@inject MistralService MistralService
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject IConfiguration Configuration

<PageTitle>Blog</PageTitle>


<MudContainer MaxWidth="MaxWidth.Medium" Class="pt-lg-5 mt-20">
    @if (BlogResponse != null)
    {

        <h1 class="display-1 fw-bold" style="font-size: 3rem;">@BlogResponse.title</h1>
        <p class="lead mt-3" style="font-size: 1.5rem;">@BlogResponse.description</p>

        <div class="flex items-center space-x-3">
            <img src="@imageDataUrl" alt="Author" class="profile-picture cursor-pointer" onclick="@NavToProfile">
            <div>
                <div class="d-flex align-items-center gap-4">
                    <h3 class="text-lg-center font-semibold m-0 cursor-pointer" onclick="@NavToProfile">@BlogResponse.userName</h3>
                    @if(AuthProfile.userId != BlogResponse.userId){
                        <button id="Relation" class="btn btn-outline-dark" style="@GetButtonClass()" onclick="@ToggleRelation">@RelationStatus</button>
                    }
                </div>
                <p class="mt-2 text-sm text-gray-500">Published on @BlogResponse.created_at.ToString("MMM dd, yyyy")</p>
            </div>
        </div>

        <hr class="my-5 border-gray-300" />

    }
    <div id="blogContent"></div>

    @if (Summary == null)
    {
        <MudButton Disabled="@isResponding" OnClick="@GetSummary" Class="mb-5" Variant="Variant.Filled" Color="Color.Primary">Create AI-Powered Summary!</MudButton>
    }
    else
    {
        <div class="align-content-center">
            <h2>Summary!</h2>
            <p>@((MarkupString)Markdown.ToHtml(Summary))</p>
        </div>
        @if (SummarySaved == false) {
            <MudButton OnClick="@SaveSummary" Class="mb-5" Variant="Variant.Outlined" Color="Color.Primary">Save Summary</MudButton>
        }
    }

</MudContainer>

<style>
    .profile-picture {
    width: 75px; 
    height: 75px;
    border-radius: 50%; 
    object-fit: cover; 
    border: 2px solid #ddd; 
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2); 
    }
</style>

@code {
    [Parameter] public string blogId { get; set; }
    WiseBlog.Shared.Models.Blog BlogResponse;
    string imageDataUrl = "";
    WiseBlog.Shared.Models.Profile AuthProfile;
    string RelationStatus;

    private bool isResponding = false;
    private bool SummarySaved = false;
    private string? Summary = null;

    string apiBaseUrl;

    protected override async Task OnInitializedAsync()
    {
        apiBaseUrl = Configuration["WEBAPI:ControllerURL"];
        var uri = new Uri(Nav.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("blogId", out var blogId))
        {
            if (String.IsNullOrEmpty(blogId))
            {
                AutoNavigate();
            }

            BlogResponse = await Http.GetFromJsonAsync<WiseBlog.Shared.Models.Blog>($"{apiBaseUrl}/api/Blog/GetBlog/{blogId}");
            var ContentResponse = await Http.GetStringAsync($"{apiBaseUrl}/api/Blog/GetContent/{BlogResponse.contentId}");
            await JSRuntime.InvokeVoidAsync("setBlogContent", ContentResponse);

            var imageString = await Http.GetStringAsync($"{apiBaseUrl}/api/Profile/GetProfileImage/{BlogResponse.userId}");
            imageDataUrl = $"data:image/png;base64,{imageString}";

            var authuser = ((AuthenticationProvider)Auth).User;
            var url = $"{apiBaseUrl}/api/Profile?userId={authuser.id}";
            AuthProfile = await Http.GetFromJsonAsync<WiseBlog.Shared.Models.Profile>(url);
            Console.WriteLine(AuthProfile.name);

            if (AuthProfile.following.Contains(BlogResponse.userId)) { RelationStatus = "Following"; }
            else { RelationStatus = "Follow"; }
            GetButtonClass();

            // Navigation.LocationChanged += OnLocationChanged;
            StateHasChanged();
        }
        else
        {
            AutoNavigate();
        }
    }

    private async Task GetSummary()
    {
        isResponding = true;
        Snackbar.Add("Summarizing the Blog...", Severity.Info, options =>
            {
                options.RequireInteraction = true; // Prevent auto-dismiss
            });
        // await Task.Delay(5000);
        var blogContent = await JSRuntime.InvokeAsync<string>("getBlogContent");
        Console.WriteLine("Blog Content : " + blogContent);
        var response = await MistralService.GenerateTextAsync($"Summarize the following Blog content : {blogContent}");
        Console.WriteLine(response);
        Summary = response;
        // Summary = "Summarizing the Blog for you!";
        Snackbar.Clear();
        StateHasChanged();
    }

    public async Task SaveSummary()
    {
        SummarySaved = true;
        var summary = new Summary
        {
            blogId = BlogResponse.Id,
            userId = AuthProfile.userId,
            userName = AuthProfile.name,
            CreatorId = BlogResponse.userId,
            CreatorName = BlogResponse.userName,
            title = BlogResponse.title,
            summary = Summary
        };
        var response = await Http.PostAsJsonAsync($"{apiBaseUrl}/api/Blog/SaveSummary", summary);
        Snackbar.Add("Summary saved! Visit your profile to see!", Severity.Info);
    }

    public void AutoNavigate()
    {
        Nav.NavigateTo("/", replace: true);
    }

    public string GetButtonClass() {
        if (RelationStatus == "Follow")
            return "border-radius: 50px; background-color: white; color: black;";
        else
            return "border-radius: 50px; color: white; background-color: black;";
    }

    private async Task ToggleRelation() {
        var request = new FollowRequest { UserId = AuthProfile.userId, BlogUserId = BlogResponse.userId };

        if (RelationStatus == "Follow") {
            RelationStatus = "Following";
            request.ToFollow = true;
            var response = await Http.PostAsJsonAsync($"{apiBaseUrl}/api/Profile/ToggleFollow", request);
            if (response.IsSuccessStatusCode)
            {
                // Console.WriteLine($"Relationship Result: {result}");
            }
        }
        else {
            RelationStatus = "Follow";
            request.ToFollow = false;
            var response = await Http.PostAsJsonAsync($"{apiBaseUrl}/api/Profile/ToggleFollow", request);
            if (response.IsSuccessStatusCode)
            {
                // Console.WriteLine($"Relationship Result: {result}");
            }
        }
    }

    private void NavToProfile()
    {
        Nav.NavigateTo($"/profile?id={BlogResponse?.userId}");
    }
}
